package com.media.service;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.media.config.JwtProvider;
import com.media.models.User;
import com.media.repository.UserRepository;

@Service
public class UserServiceImpl implements UserService {

	@Autowired
	UserRepository userRepository;

	@Override
	public User registerUser(User user) {

		User newUser = new User();
		// newUser.setId(user.getId());
		newUser.setFirstName(user.getFirstName());
		newUser.setLastName(user.getLastName());
		newUser.setEmail(user.getEmail());
		newUser.setPassword(user.getPassword());
		newUser.setGender(user.getGender());
		newUser.setFollowers(user.getFollowers());
		newUser.setFollowings(user.getFollowings());
		newUser.setSavedPost(user.getSavedPost());

		User savedUser = userRepository.save(newUser);

		return savedUser;
	}

	@Override
	public User findUserById(Integer userId) throws Exception {
		Optional<User> user = userRepository.findById(userId);

		if (user.isPresent())
			return user.get();

		throw new Exception("User not exists with userid " + userId);
	}

	@Override
	public List<User> getAllUsers() {

		List<User> allUsers = userRepository.findAll();

		return allUsers;
	}

	@Override
	public User findUserByEmail(String email) throws Exception {

		Optional<User> user = userRepository.findByEmail(email);

		if (user.isEmpty())
			throw new Exception("User not exists with email " + email);

		return user.get();
	}

	@Override
	public User followUser(Integer reqUserId, Integer userId2) throws Exception {

		User reqUser = findUserById(reqUserId);
		User user2 = findUserById(userId2);

		if (user2.getFollowers().contains(reqUser.getId())) {
			user2.getFollowers().remove(reqUser.getId());
		} else {
			user2.getFollowers().add(reqUser.getId());
		}

		if (reqUser.getFollowings().contains(user2.getId())) {
			reqUser.getFollowings().remove(user2.getId());
		} else {
			reqUser.getFollowings().add(user2.getId());
		}

		userRepository.save(reqUser);
		userRepository.save(user2);

		return reqUser;
	}

	@Override
	public User updateUser(User user, Integer id) throws Exception {

		Optional<User> user1 = userRepository.findById(id);

		if (user1.isEmpty())
			throw new Exception("User not exists with userid " + id);

		User oldUser = user1.get();

		if (user.getFirstName() != null) {
			oldUser.setFirstName(user.getFirstName());
		}

		if (user.getLastName() != null) {
			oldUser.setLastName(user.getLastName());
		}
		if (user.getEmail() != null) {
			oldUser.setEmail(user.getEmail());
		}
		if (user.getPassword() != null) {
			oldUser.setPassword(user.getPassword());
		}

		User updatedUser = userRepository.save(oldUser);
		return updatedUser;

	}

	@Override
	public List<User> searchUser(String query) {

		List<User> users = userRepository.searchUser(query);
		return users;

	}

	@Override
	public String deleteUser(Integer userId) throws Exception {
		Optional<User> user1 = userRepository.findById(userId);

		if (user1.isEmpty())
			throw new Exception("User not exists with userid " + userId);

		userRepository.deleteById(userId);

		return "user deleted successfully with id " + userId;
	}

	@Override
	public User findUserByJwt(String jwt) {

		String email = JwtProvider.getEmailFromJwtToken(jwt);
		Optional<User> user = userRepository.findByEmail(email);

		return user.get();
	}

}
