package com.media.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.media.models.User;
import com.media.repository.UserRepository;
import com.media.service.UserService;

@RestController
public class UserController {

	@Autowired
	UserRepository userRepository;

	@Autowired
	UserService userService;

	@GetMapping("/api/users/{userid}")
	public ResponseEntity<User> getUserById(@PathVariable("userid") Integer id) throws Exception {
		User User = userService.findUserById(id);

		// return new ResponseEntity<User>(User, HttpStatus.OK);
		return ResponseEntity.ok(User);

	}

	@GetMapping("/api/users")
	public ResponseEntity<List<User>> getUsers() {

		List<User> users = userService.getAllUsers();
		return ResponseEntity.ok(users);

	}

	@GetMapping("/api/users/email/{email}")
	public ResponseEntity<User> getUserByEmail(@PathVariable String email) throws Exception {

		return ResponseEntity.ok(userService.findUserByEmail(email));
	}

	@PutMapping("/api/users/follow/{userId1}/{userId2}")
	public ResponseEntity<User> followUserHandler(@PathVariable Integer userId1, @PathVariable Integer userId2)
			throws Exception {

		User User = userService.followUser(userId1, userId2);

		return ResponseEntity.ok(User);
	}

	@PutMapping("/api/users/{userId}")
	public ResponseEntity<User> updateUser(@RequestBody User user, @PathVariable("userId") Integer id)
			throws Exception {

		User updatedUser = userService.updateUser(user, id);

		return ResponseEntity.ok(updatedUser);

	}

	@GetMapping("/api/users/search")
	public ResponseEntity<List<User>> searchUser(@RequestParam("query") String query) {

		List<User> users = userService.searchUser(query);

		return ResponseEntity.ok(users);
	}

	@DeleteMapping("/api/users/delete/{userId}")
	public ResponseEntity<String> deleteUser(@PathVariable Integer userId) throws Exception {
		userService.deleteUser(userId);

		return ResponseEntity.ok("Employee Deleted");
	}

	@GetMapping("/api/users/profile")
	public User getUserFromToken(@RequestHeader("Authorization") String jwt) {
		
		String email = 
		//System.out.println("Jwt is =============> " + jwt);
		return null;

	}

}
