package com.media.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RestController;

import com.media.models.Post;
import com.media.models.User;
import com.media.response.ApiResponse;
import com.media.service.PostService;
import com.media.service.UserService;

@RestController
public class PostController {

	@Autowired
	PostService postService;

	@Autowired
	UserService userService;

	@PostMapping("/api/posts")
	public ResponseEntity<Post> createPost(@RequestHeader("Authorization") String jwt, @RequestBody Post post)
			throws Exception {

		User reqUser = userService.findUserByJwt(jwt);
		Post createdPost = postService.createNewPost(post, reqUser.getId());

		return new ResponseEntity<>(createdPost, HttpStatus.ACCEPTED);

	}

	@GetMapping("/posts")
	public ResponseEntity<List<Post>> findAllPosts() {

		List<Post> allPosts = postService.findAllPosts();
		return new ResponseEntity<List<Post>>(allPosts, HttpStatus.OK);

	}

	@DeleteMapping("/posts/{postId}/user/{userId}")
	public ResponseEntity<ApiResponse> deletePost(@PathVariable Integer postId, @PathVariable Integer userId)
			throws Exception {

		String message = postService.deletePost(postId, userId);
		ApiResponse response = new ApiResponse(message, true);

		return new ResponseEntity<ApiResponse>(response, HttpStatus.OK);
	}

	@GetMapping("/posts/{postId}")
	public ResponseEntity<Post> findPostByIdHandler(@PathVariable Integer postId) throws Exception {

		Post post = postService.findPostById(postId);

		return new ResponseEntity<Post>(post, HttpStatus.ACCEPTED);

	}

	@GetMapping("/posts/user/{userId}")
	public ResponseEntity<List<Post>> findUsersPost(@PathVariable Integer userId) {

		List<Post> usersDtoPost = postService.findPostByUserId(userId);
		return new ResponseEntity<List<Post>>(usersDtoPost, HttpStatus.OK);

	}

	@PutMapping("/posts/save/{postId}/user/{userId}")
	public ResponseEntity<Post> savedPostHandler(@PathVariable Integer postId, @PathVariable Integer userId)
			throws Exception {

		Post post = postService.savedPost(postId, userId);

		return new ResponseEntity<Post>(post, HttpStatus.ACCEPTED);

	}

	@PutMapping("/posts/like/{postId}/user/{userId}")
	public ResponseEntity<Post> likePostHandler(@PathVariable Integer postId, @PathVariable Integer userId)
			throws Exception {

		Post post = postService.likePost(postId, userId);

		return new ResponseEntity<Post>(post, HttpStatus.ACCEPTED);

	}

}
